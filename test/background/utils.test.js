import { describe, expect, test } from '@jest/globals';
import { buildSecureUrl, doSignaturesMatch, sha256sum } from '../../src/background/utils';
import { SUPPORTED_CONTENT_TYPES } from '../../src/background/libravatar';

describe('sha256sum', () => {

  test('correct hash from email', async () => {
    const hash = await sha256sum('seth@falco.fun');
    expect(hash).toBe('ed86c46dbff6f88b1de2e74654697a95ad257e2fb15844839954adc6acadd8cc');
  });
});

describe('buildSecureUrl', () => {

  test('returns clean url without port string when default https port is used', async () => {
    const url = buildSecureUrl('seccdn.libravatar.org', 443);
    expect(url).toBe('https://seccdn.libravatar.org');
  });

  test('contains port in url for when non-standard port is used', async () => {
    const url = buildSecureUrl('seccdn.example.org', 444);
    expect(url).toBe('https://seccdn.example.org:444');
  });
});

describe('doSignaturesMatch', () => {

  test('ensure png image matches png signatures', async () => {
    const png = new Uint8Array([
      137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 5, 0, 0, 0, 5, 8, 6, 0, 0, 0, 141, 111, 38, 229, 0, 0, 1, 133, 105, 67, 67, 80, 73, 67, 67, 32, 80, 114, 111, 102, 105, 108, 101, 0, 0, 120, 156, 125, 145, 61, 72, 195, 80, 20, 133, 79, 83, 197, 34, 21, 7, 59, 136, 56, 100, 168, 226, 96, 161, 168, 136, 163, 86, 161, 8, 21, 66, 173, 208, 170, 131, 201, 75, 255, 160, 73, 67, 146, 226, 226, 40, 184, 22, 28, 252, 89, 172, 58, 184, 56, 235, 234, 224, 42, 8, 130, 63, 32, 110, 110, 78, 138, 46, 82, 226, 125, 73, 161, 69, 140, 23, 30, 239, 227, 188, 123, 14, 239, 221, 7, 8, 141, 10, 211, 172, 174, 56, 160, 233, 182, 153, 78, 38, 196, 108, 110, 85, 236, 121, 69, 16, 33, 4, 48, 134, 184, 204, 44, 99, 78, 146, 82, 240, 173, 175, 123, 234, 164, 186, 139, 241, 44, 255, 190, 63, 171, 79, 205, 91, 12, 8, 136, 196, 179, 204, 48, 109, 226, 13, 226, 233, 77, 219, 224, 188, 79, 28, 97, 37, 89, 37, 62, 39, 30, 55, 233, 130, 196, 143, 92, 87, 60, 126, 227, 92, 116, 89, 224, 153, 17, 51, 147, 158, 39, 142, 16, 139, 197, 14, 86, 58, 152, 149, 76, 141, 120, 138, 56, 170, 106, 58, 229, 11, 89, 143, 85, 206, 91, 156, 181, 74, 141, 181, 238, 201, 95, 24, 206, 235, 43, 203, 92, 167, 53, 140, 36, 22, 177, 4, 9, 34, 20, 212, 80, 70, 5, 54, 98, 180, 235, 164, 88, 72, 211, 121, 194, 199, 63, 228, 250, 37, 114, 41, 228, 42, 131, 145, 99, 1, 85, 104, 144, 93, 63, 248, 31, 252, 158, 173, 85, 152, 156, 240, 146, 194, 9, 160, 251, 197, 113, 62, 70, 128, 158, 93, 160, 89, 119, 156, 239, 99, 199, 105, 158, 0, 193, 103, 224, 74, 111, 251, 171, 13, 96, 230, 147, 244, 122, 91, 139, 30, 1, 253, 219, 192, 197, 117, 91, 83, 246, 128, 203, 29, 96, 240, 201, 144, 77, 217, 149, 130, 180, 132, 66, 1, 120, 63, 163, 111, 202, 1, 3, 183, 64, 239, 154, 55, 183, 214, 57, 78, 31, 128, 12, 205, 42, 117, 3, 28, 28, 2, 163, 69, 202, 94, 247, 121, 119, 168, 115, 110, 255, 246, 180, 230, 247, 3, 102, 22, 114, 162, 146, 217, 168, 25, 0, 0, 0, 116, 73, 68, 65, 84, 120, 156, 1, 105, 0, 150, 255, 1, 161, 74, 96, 255, 186, 5, 251, 0, 186, 4, 250, 0, 77, 243, 254, 0, 69, 8, 19, 0, 2, 208, 241, 236, 0, 253, 69, 59, 0, 121, 115, 112, 0, 206, 33, 24, 0, 6, 16, 13, 0, 2, 30, 9, 13, 0, 36, 11, 14, 0, 252, 1, 1, 0, 24, 22, 22, 0, 190, 212, 207, 0, 2, 207, 224, 218, 0, 14, 242, 241, 0, 28, 25, 25, 0, 53, 8, 10, 0, 237, 243, 241, 0, 4, 201, 230, 222, 0, 234, 188, 188, 0, 1, 251, 246, 0, 13, 187, 190, 0, 38, 36, 35, 0, 104, 177, 35, 222, 164, 182, 91, 22, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130
    ]);
    const contentType = SUPPORTED_CONTENT_TYPES.get('image/png');

    const result = await doSignaturesMatch(
      new Blob([png], { type: 'image/png' }),
      contentType?.signature,
      contentType?.tail,
    );

    expect(result).toBe(true);
  });

  test('ensure non png image does not match png signatures', async () => {
    const png = new Uint8Array([
      132, 80, 78, 71, 222, 164, 182, 91, 22, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130
    ]);
    const contentType = SUPPORTED_CONTENT_TYPES.get('image/png');

    const result = await doSignaturesMatch(
      new Blob([png], { type: 'image/png' }),
      contentType?.signature,
      contentType?.tail,
    );

    expect(result).toBe(false);
  });

  test('ensure jpg image matches jpg signatures', async () => {
    const png = new Uint8Array([
      255, 216, 255, 224, 0, 16, 74, 70, 73, 70, 0, 1, 1, 1, 0, 96, 0, 96, 0, 0, 255, 254, 0, 59, 67, 82, 69, 65, 84, 79, 82, 58, 32, 103, 100, 45, 106, 112, 101, 103, 32, 118, 49, 46, 48, 32, 40, 117, 115, 105, 110, 103, 32, 73, 74, 71, 32, 74, 80, 69, 71, 32, 118, 54, 50, 41, 44, 32, 113, 117, 97, 108, 105, 116, 121, 32, 61, 32, 57, 48, 10, 255, 219, 0, 67, 0, 3, 2, 2, 3, 2, 2, 3, 3, 3, 3, 4, 3, 3, 4, 5, 8, 5, 5, 4, 4, 5, 10, 7, 7, 6, 8, 12, 10, 12, 12, 11, 10, 11, 11, 13, 14, 18, 16, 13, 14, 17, 14, 11, 11, 16, 22, 16, 17, 19, 20, 21, 21, 21, 12, 15, 23, 24, 22, 20, 24, 18, 20, 21, 20, 255, 219, 0, 67, 1, 3, 4, 4, 5, 4, 5, 9, 5, 5, 9, 20, 13, 11, 13, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 255, 192, 0, 17, 8, 0, 5, 0, 5, 3, 1, 34, 0, 2, 17, 1, 3, 17, 1, 255, 196, 0, 31, 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255, 196, 0, 181, 16, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125, 1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 196, 0, 31, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255, 196, 0, 181, 17, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119, 0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 218, 0, 12, 3, 1, 0, 2, 17, 3, 17, 0, 63, 0, 251, 43, 193, 122, 115, 39, 138, 60, 97, 27, 92, 201, 36, 113, 222, 132, 69, 96, 14, 57, 98, 127, 159, 228, 7, 160, 162, 138, 43, 229, 90, 87, 61, 169, 73, 220, 255, 217
    ]);
    const contentType = SUPPORTED_CONTENT_TYPES.get('image/jpg');

    const result = await doSignaturesMatch(
      new Blob([png], { type: 'image/jpg' }),
      contentType?.signature,
      contentType?.tail,
    );

    expect(result).toBe(true);
  });

  test('ensure non jpg image does not match jpg signatures', async () => {
    const png = new Uint8Array([
      255, 213, 43, 229, 90, 87, 61, 169, 73, 220, 255, 217
    ]);
    const contentType = SUPPORTED_CONTENT_TYPES.get('image/jpg');

    const result = await doSignaturesMatch(
      new Blob([png], { type: contentType?.contentType }),
      contentType?.signature,
      contentType?.tail,
    );

    expect(result).toBe(false);
  });
});
